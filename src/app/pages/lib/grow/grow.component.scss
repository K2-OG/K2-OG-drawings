@use "../../../../common.scss" as *;
@use "../vapor/styles/shadows.scss" as *;

@keyframes zoomInRight {
  0% {
    transform: translateX(0);
  }
  100% {
    transform: translateX(200%) scale(1.5);
  }
}

@keyframes zoomInLeft {
  0% {
    transform: translateX(0);
  }
  100% {
    transform: translateX(-200%) scale(1.5);
  }
}

@mixin towerLoop($shadow-position) {
  $amount: random(3) + 3;
  @for $i from 1 through 9 {
    .tower:nth-child(#{$i}) {
      display: block;
      $tallness: random(70) + 110px - $i * 15;
      $fatness: random(25) + 15px;
      transform-origin: bottom right;
      @if ($i> $amount) {
        opacity: 0.1;
      }
      @if ($shadow-position== "right") {
        animation: zoomInLeft 5s linear infinite;
      } @else {
        animation: zoomInRight 5s linear infinite;
      }

      .roof-container {
        width: $fatness;
      }
      @include buildIt($shadow-position, $tallness, $fatness);
    }
  }
}

@mixin buildItUp($shadow-position, $tallness, $fatness, $total-height) {
  height: ceil($tallness) + 1;
  width: $fatness;
  @if ($total-height > $tallness) {
    @if $fatness >= $antenna-limit {
      top: $building-container-height - $total-height;
      .roof-shadow {
        @include throwSomeShade($tallness, $fatness, $shadow-position);
      }
    } @else {
      top: $building-container-height - $total-height + 2.6px;
    }
  } @else {
    $repeatitions: random(30) + 20;
    background-repeat: no-repeat;
    .shadow {
      @include throwSomeShade($tallness, $fatness, $shadow-position);
    }
  }
}

@mixin buildIt($shadow-position, $tallness, $fatness) {
  @include buildItUp($shadow-position, $tallness, $fatness, $tallness);
  $total-height: $tallness;
}

$size: 600px;
.center {
  background-color: white;
  width: $size;
  height: $size;
  .container {
    display: flex;
    justify-content: space-between;

    // ///////////////////////////////////////
    $building-container-height: 200px;
    $vertical-position: 52px;
    $building-color: #14001e;

    .buildings-container {
      position: absolute;
      width: $size;
      height: $building-container-height;
      transform: translateY($vertical-position);
      display: flex;
      align-items: flex-end;
      justify-content: space-between;
      -webkit-box-reflect: below -1px linear-gradient(transparent 80%, rgba(0, 0, 0, 0.5));
      .buildings {
        display: flex;
        align-items: flex-end;
        // $perspe: 2000px;
        // -webkit-perspective: $perspe;
        // perspective: $perspe;
        // -webkit-transform-style: preserve-3d;
        // transform-style: preserve-3d;
        .layer {
          display: flex;
          align-items: flex-end;
          width: 100%;
          height: 100%;
          //   &.second-layer {
          //     display: none;
          //     transform: translateZ(-500px) translateY(-150px);
          //     -webkit-transform-style: preserve-3d;
          //     transform-style: preserve-3d;
          //   }
        }
        &.lefties {
          .layer {
            flex-direction: row;
            @include towerLoop("right");
            &.first-layer {
            }
            // &.second-layer {
            // @include towerLoop("right");
            // }
          }
        }
        &.righties {
          .layer {
            flex-direction: row-reverse;
            @include towerLoop("left");
            &.first-layer {
            }
            // &.second-layer {
            //   @include towerLoop("left");
            // }
          }
        }
        .tower {
          display: none;
          background-color: $building-color;

          .roof-container {
            display: flex;
            justify-content: center;
            .roof {
              background: $building-color;
              z-index: -1;
              position: absolute;
              display: none;
            }
          }
        }
      }
    }
  }
}
