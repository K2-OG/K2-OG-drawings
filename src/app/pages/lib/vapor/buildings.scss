@use "sass:math";
@use "./vapor.component.scss" as *;
@use "./windows.scss" as *;

$border: $shadow-start-color 0.5px solid;

@mixin throwSomeShade($tall, $fat, $shadow-position) {
  $fatness: math.div($fat, 10);
  background: linear-gradient($shadow-start-color, $shadow-end-color);
  width: $fatness;
  height: $tall;
  align-self: flex-end;
  z-index: 2;
  $shadow-standard: 0.5px 1px 0px $shadow-end-color;
  @if $shadow-position == "left" {
    box-shadow: 0.5px $shadow-standard;
    transform: skewY(-$shadow-skew);
    margin-left: -$fatness;
  } @else {
    box-shadow: -0.5px $shadow-standard;
    margin-left: $fat;
    transform: skewY($shadow-skew);
  }
}

@mixin towerLoop($shadow-position) {
  @for $i from 1 through 6 {
    .tower:nth-child(#{$i}) {
      $tallness: random(70) + 110px - $i * 15;
      $fatness: random(25) + 15px;
      .roof-container {
        width: $fatness;
      }
      @include buildIt($shadow-position, $tallness, $fatness);
    }
  }
}

@mixin buildItUp($shadow-position, $tallness, $fatness, $total-height) {
  background: $building-color;
  height: ceil($tallness) + 1;
  width: $fatness;
  @if ($total-height > $tallness) {
    @if $fatness >= $antenna-limit {
      top: $building-container-height - $total-height;
      .roof-shadow {
        @include throwSomeShade($tallness, $fatness, $shadow-position);
      }
    } @else {
      top: $building-container-height - $total-height + 2.6px;
    }
  }
  .shadow {
    @include throwSomeShade($tallness, $fatness, $shadow-position);
  }
}

@mixin buildIt($shadow-position, $tallness, $fatness) {
  @include buildItUp($shadow-position, $tallness, $fatness, $tallness);
  @include windowToTheWorld($tallness, $fatness);
  $total-height: $tallness;
  @for $i from 1 through 6 {
    .roof {
      $current-fat: $fatness - $i * 5;
      $roof-height: math.div(random(200) + 300px, 100);
      &:nth-child(#{$i}) {
        $total-height: $total-height + $roof-height;
        @if ($current-fat < 0.1) {
          $current-fat: 0;
        } @else if $current-fat < $antenna-limit {
          $antenna: (math.div(random(100) + 70, 100) * math.div($tallness, 10));
          $roof-height: $roof-height + $antenna;
          $total-height: $total-height + $roof-height;
          $border-style: solid 1.5px;
          $border-color: red;
          border-top: $border-style $border-color;
          @keyframes blink {
            0% {
              border-top: $border-style $border-color;
            }
            25% {
              border-top: $border-style rgba($color: $border-color, $alpha: 0.5);
            }
            50% {
              border-top: $border-style rgba($color: $border-color, $alpha: 0);
            }
            75% {
              border-top: $border-style rgba($color: $border-color, $alpha: 0.5);
            }
            100% {
              border-top: $border-style $border-color;
            }
          }
          animation: blink 1.5s infinite linear;
          $delay: random(750);
          animation-delay: #{$delay}ms;
          @include buildItUp(
            $shadow-position,
            $roof-height,
            $current-fat,
            $total-height
          );
        } @else {
          @include buildItUp(
            $shadow-position,
            $roof-height,
            $current-fat,
            $total-height
          );
          border-top: $border;
          @if ($fatness - ($i + 1) * 5) < $antenna-limit {
            border-top: $border;
          }
        }

        &:last-child {
          @if $current-fat >= $antenna-limit {
            border-top: $border;
          }
          // roof species evo - biodiversity
          // triangle
          // &:first-child {
          //   background: transparent;
          //   $tempP: $fatness/1px;
          //   $triangle-height: math.sqrt(math.div(math.pow($tempP, 2), 2)) * 1px;
          //   border-top: $triangle-height solid transparent;
          //   border-bottom: $triangle-height solid transparent;
          //   border-left: $triangle-height solid green;

          //   @if $shadow-position == "left" {
          //     transform: rotate(135deg);
          //     margin-left: 0;
          //   } @else {
          //     transform: rotate(45deg);
          //     margin-right: 0;
          //   }

          //   width: auto;
          //   height: auto;
          //   top: $total-height - $roof-height + $triangle-height;
          //   .shadow {
          //     display: none;
          //     @if $shadow-position == "left" {
          //       transform: rotate(135deg);
          //       margin-left: 0;
          //     } @else {
          //       transform: rotate(45deg);
          //       margin-right: 0;
          //     }
          //   }
          // }
          // duomo
          // &:first-child {
          //   border-radius: 50% 50% 0 0;
          //   .shadow {
          //     display: none;
          //   }
          // }
        }
      }
      // @if ($current-fat < 0.1 and $total-height) {
      //   &:nth-child(#{$i - 1}) {
      //     border-top: $border;
      //   }
      // }
    }
  }
}

$vertical-position: 52px;
.buildings-container {
  position: absolute;
  width: $size;
  height: $building-container-height;
  transform: translateY($vertical-position);
  display: flex;
  align-items: flex-end;
  justify-content: space-between;
  .buildings {
    display: flex;
    align-items: flex-end;
    // $perspe: 2000px;
    // -webkit-perspective: $perspe;
    // perspective: $perspe;
    // -webkit-transform-style: preserve-3d;
    // transform-style: preserve-3d;
    .layer {
      display: flex;
      align-items: flex-end;
      width: 100%;
      height: 100%;
      //   &.second-layer {
      //     display: none;
      //     transform: translateZ(-500px) translateY(-150px);
      //     -webkit-transform-style: preserve-3d;
      //     transform-style: preserve-3d;
      //   }
    }
    &.lefties {
      .layer {
        flex-direction: row;
        @include towerLoop("right");
        &.first-layer {
        }
        // &.second-layer {
        // @include towerLoop("right");
        // }
      }
    }
    &.righties {
      .layer {
        flex-direction: row-reverse;
        @include towerLoop("left");
        &.first-layer {
        }
        // &.second-layer {
        //   @include towerLoop("left");
        // }
      }
    }
    .tower {
      .roof-container {
        display: flex;
        justify-content: center;
        .roof {
          z-index: -1;
          position: absolute;
        }
      }
    }
  }
}
