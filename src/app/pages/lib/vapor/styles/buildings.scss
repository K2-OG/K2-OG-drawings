@use "sass:math";
@use "@sass-fairy/string";
@use "../../../../../common.scss" as *;
@use "../vapor.component.scss" as *;
@use "./windows.scss" as windows;
@use "./shadows.scss" as shadows;
@use "./roofs.scss" as roofs;
@use "./lights.scss" as lights;
@use "./glitch.scss" as glitch;

$border: $shadow-start-color 0.5px solid;

$exit: 300px;
@mixin zoom($modifier) {
  @keyframes zoom {
    0% {
      transform: translateX(0);
    }
    50% {
      transform: translateX($modifier * $exit * 0.75) scale(1.5);
    }
    100% {
      transform: translateX($modifier * $exit) scale(2);
    }
  }
  animation: zoom $animation-settings;
}
@mixin zoomInRight() {
  @include zoom(1);
}

@mixin zoomInLeft() {
  @include zoom(-1);
}

@mixin towerLoop($shadow-position) {
  $amount: random(3) + 3;
  @for $i from 1 through $amount + 1 {
    .tower:nth-child(#{$i}) {
      $tallness: random(70) + 110px - $i * 15;
      $fatness: random(25) + 15px;
      transform-origin: bottom;
      @if ($i> $amount) {
        opacity: 0;
      }
      $animation-settings: 15s linear forwards;

      @if ($shadow-position== "right") {
      } @else {
      }
      $align: randomFloat(1, 3);
      @if $align < 1.4 {
        $align: 1;
      } @else if $align > 2.6 {
        $align: 3;
        @if ($shadow-position == "right") {
          align-items: flex-end;
        }
      } @else {
        $align: 2;
      }
      .roof-container {
        @if $align==1 {
          align-items: flex-start;
        } @else if $align==2 {
          align-items: center;
        } @else if $align==3 {
          align-items: flex-end;
        }
        width: $fatness;
      }
      @include buildIt($shadow-position, $tallness, $fatness, $align);
    }
  }
}

@mixin buildItUp($shadow-position, $tallness, $fatness, $total-height) {
  height: ceil($tallness);
  width: $fatness;
  @if ($total-height > $tallness) {
  } @else {
    @include lights.lightEmUp($building-color);
    .shadow {
      @include shadows.throwSomeShade(
        $tallness,
        $fatness,
        $shadow-position,
        false
      );
    }
  }
}

@mixin buildIt($shadow-position, $tallness, $fatness, $align) {
  @include buildItUp($shadow-position, $tallness, $fatness, $tallness);
  @include windows.windowToTheWorld($tallness, $fatness);
  @include roofs.demRoofies($shadow-position, $tallness, $fatness, $align);
  @include glitch.chromaticAbberation($tallness, $fatness);
  $total-height: $tallness;
}

$vertical-position: 52px;
.buildings-container {
  position: absolute;
  width: $size;
  height: $building-container-height;
  transform: translateY($vertical-position);
  display: flex;
  align-items: flex-end;
  justify-content: space-between;
  -webkit-box-reflect: below -1px linear-gradient(transparent 80%, rgba(0, 0, 0, 0.08));
  .buildings {
    display: flex;
    align-items: flex-end;
    .layer {
      display: flex;
      align-items: flex-end;
      width: 100%;
      height: 100%;
    }
    &.lefties {
      .layer {
        .tower {
          margin-right: 2px;
          .roof {
            .roof-body {
            }
            .roof-shadow {
            }
            flex-direction: row;
          }
        }
        flex-direction: row;
        @include towerLoop("right");
      }
    }
    &.righties {
      .layer {
        .tower {
          margin-left: 2px;
          .roof {
            .roof-body {
            }
            .roof-shadow {
            }
          }
        }
        flex-direction: row-reverse;
        @include towerLoop("left");
      }
    }
    .tower {
      display: flex;
      flex-direction: column-reverse;
      .body {
        border-top: $border;
        .shadow {
        }
      }
      .roof-container {
        display: flex;
        justify-content: center;
        flex-direction: column-reverse;
        .roof {
          z-index: -1;
          display: flex;
          flex-direction: row-reverse;
          align-items: flex-end;
          border-top: $border;
          background: $building-color;
          .roof-body {
            // background-color: $building-color;
          }
          .roof-shadow {
            background: $shadow-start-color;
          }
        }
      }
    }
  }
}
